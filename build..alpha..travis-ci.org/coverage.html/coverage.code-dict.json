{"/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/test.js":"/* istanbul instrument in package npmtest_ember_cli_materialize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/lib.npmtest_ember_cli_materialize.js":"/* istanbul instrument in package npmtest_ember_cli_materialize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_materialize = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_materialize = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-materialize && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_materialize */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_materialize\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_materialize.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_materialize.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_materialize.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_materialize.__dirname + '/lib.npmtest_ember_cli_materialize.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-cli-materialize'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return {\n    materializeDefaults: {\n      modalIsFooterFixed: false,\n      modalContainerId: 'materialize-modal-root-element',\n      buttonIconPosition: 'left',\n      loaderSize: 'big',\n      loaderMode: 'indeterminate',\n      dropdownInDuration: 300,\n      dropdownOutDuration: 300\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/config/release.js":"/* jshint node:true */\n// var RSVP = require('rsvp');\n\n// For details on each option run `ember help release`\nmodule.exports = {\n  // local: true,\n  // remote: 'some_remote',\n  // annotation: \"Release %@\",\n  // message: \"Bumped version to %@\",\n  // manifest: [ 'package.json', 'bower.json', 'someconfig.json' ],\n  // publish: true,\n  // strategy: 'date',\n  // format: 'YYYY-MM-DD',\n  // timezone: 'America/Los_Angeles',\n  //\n  // beforeCommit: function(project, versions) {\n  //   return new RSVP.Promise(function(resolve, reject) {\n  //     // Do custom things here...\n  //   });\n  // }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-badge.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-badge';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: 'span',\n  text: null,\n  classNames: ['badge']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-btn-dropdown.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-btn-dropdown';\nimport MaterializeButton from './md-btn';\n\nconst { computed } = Ember;\n\nexport default MaterializeButton.extend({\n  layout,\n  tagName: 'a',\n  classNames: ['dropdown-button'],\n  icon: 'mdi-navigation-expand-more',\n  iconBody: '',\n  iconPosition: 'right',\n  attributeBindings: [\n    'inDuration:data-induration', 'outDuration:data-outduration', 'constrainWidth:data-constrainwidth', '_hoverVal:data-hover', 'gutter:data-gutter', 'belowOrigin:data-beloworigin', 'alignment'\n  ],\n\n  didRender() {\n    this._super(...arguments);\n    this._setupDropdown();\n  },\n\n  _hoverVal: computed('hover', function() {\n    return this.get('hover') ? 'true' : 'false';\n  }),\n\n  _setupDropdown() {\n    // needed until the Materialize.dropdown plugin is replaced\n    this.$().attr('data-activates', this.get('_dropdownContentId'));\n    let options = {\n      hover: !!this.getWithDefault('hover', false),\n      // Ignore requireCamelCaseOrUpperCaseIdentifiers because the original\n      // variable of materializecss contains underscore\n      // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n      constrain_width: !!this.getWithDefault('constrainWidth', true),\n      // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n      inDuration: this.getWithDefault('inDuration', this.get('_mdSettings.dropdownInDuration')),\n      outDuration: this.getWithDefault('outDuration', this.get('_mdSettings.dropdownOutDuration')),\n      gutter: this.getWithDefault('gutter', 0),\n      belowOrigin: !!this.getWithDefault('belowOrigin', false),\n      alignment: this.getWithDefault('alignment', 'left')\n    };\n\n    this.$().dropdown(options);\n  },\n  _dropdownContentId: computed(function() {\n    return `${this.get('elementId')}-dropdown-content`;\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-btn.js":"import Ember from 'ember';\nimport UsesSettings from '../mixins/uses-settings';\nimport layout from '../templates/components/md-btn';\n\nconst { Component, computed, computed: { oneWay }, typeOf, run: { scheduleOnce } } = Ember;\n\nexport default Component.extend(UsesSettings, {\n  layout,\n  tagName: 'a',\n  classNameBindings: ['btn:waves-effect', 'wavesClass', 'isDisabled:disabled:waves-effect', 'buttonClass'],\n  attributeBindings: ['isDisabled:disabled'],\n  wavesClass: 'waves-light',\n  text: null,\n  icon: null,\n  iconPosition: oneWay('_mdSettings.buttonIconPosition'),\n  buttonType: null,\n  actionArg: null,\n  isFlat: computed.equal('buttonType', 'flat'),\n  isDisabled: false,\n\n  didInsertElement() {\n    this._super(...arguments);\n    scheduleOnce('afterRender', this, this._setupWaves);\n  },\n\n  buttonClass: computed('buttonType', function() {\n    const buttonType = this.get('buttonType');\n    return buttonType ? `btn-${buttonType}` : 'btn';\n  }),\n\n  _setupWaves() {\n    const Waves = window.Waves || {};\n    if (typeOf(Waves.displayEffect) === 'function') {\n      Waves.displayEffect();\n    }\n  },\n\n  click() {\n    if (!this.get('disabled')) {\n      this.sendAction('action', this.get('actionArg'));\n    }\n  }\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-btn-submit.js":"import MaterializeButton from './md-btn';\n\nexport default MaterializeButton.extend({\n  layoutName: 'components/materialize-button',\n  tagName: 'button',\n  attributeBindings: ['type'],\n  type: 'submit'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card-action.js":"import Ember from 'ember';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  classNames: ['card-action']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card-collapsible.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-card-collapsible';\n\nconst { computed, Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: 'ul',\n  classNames: ['collapsible'],\n  attributeBindings: ['data-collapsible'],\n  accordion: true,\n\n  'data-collapsible': computed(function() {\n    return this.get('accordion') ? 'accordion' : 'expandable';\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupCollapsible();\n  },\n\n  _setupCollapsible() {\n    const accordion = this.get('accordion');\n    this.$().collapsible({ accordion });\n  },\n\n  _teardownCollapsible() {\n    const $panelHeaders = this.$('> li > .collapsible-header');\n    this.$().off('click.collapse', '.collapsible-header');\n    $panelHeaders.off('click.collapse');\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this._teardownCollapsible();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card-content.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-card-content';\n\nconst { Component, computed, computed: { alias } } = Ember;\n\nexport default Component.extend({\n  layout,\n\n  classNames: ['card-content'],\n\n  classNameBindings: ['class'],\n  title: alias('parentView.title'),\n  titleClass: alias('parentView.titleClass'),\n  activator: alias('parentView.activator'),\n\n  cardTitleClass: computed('titleClass', function() {\n    return this.get('titleClass') || 'black-text';\n  })\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-card';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['card'],\n  classNameBindings: ['class']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card-panel.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-card-panel';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n\n  classNames: ['card-panel'],\n  classNameBindings: ['class']\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-card-reveal.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-card-reveal';\n\nconst { Component, computed: { alias } } = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: 'div',\n\n  classNames: ['card-reveal'],\n  classNameBindings: ['class'],\n  activator: alias('parentView.activator')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-check.js":"import Ember from 'ember';\nimport SelectableItem from './selectable-item';\nimport layout from '../templates/components/md-checkbox';\n\nconst { computed: { alias } } = Ember;\n\nexport default SelectableItem.extend({\n  layout,\n  text: alias('name'),\n  classNames: ['materialize-checkbox']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-checks-check.js":"import CheckboxComponent from './md-check';\nimport GroupSelectableItemMixin from '../mixins/group-selectable-item';\n\nexport default CheckboxComponent.extend(GroupSelectableItemMixin, { });\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-checks.js":"import SelectableItemGroup from './selectable-item-group';\n\nexport default SelectableItemGroup.extend({\n  selectableItemView: 'md-checks-check',\n  multiple: true\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-collapsible.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-collapsible';\nimport _computed from 'ember-new-computed';\n\nconst { deprecate, Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  tagName: 'li',\n  classNameBindings: ['class'],\n  actionArg: null,\n  model: _computed('actionArg', {\n    get() {\n      deprecate('md-collapsible#model is deprecated. Please use md-collapsible#actionArg instead');\n      return this.get('actionArg');\n    },\n    set(key, val) {\n      deprecate('md-collapsible#model is deprecated. Please use md-collapsible#actionArg instead');\n      return this.set('actionArg', val);\n    }\n  }),\n  actions: {\n    headerClicked() {\n      this.sendAction('action', this.get('actionArg'));\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-collection.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-collection';\n\nconst { Component, computed: { bool } } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['collection'],\n  classNameBindings: ['_hasHeader:with-header'],\n  headerComponentName: 'md-default-collection-header',\n  header: null,\n  _hasHeader: bool('header')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-copyright.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-copyright';\n\nconst { Component, computed, assert } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['footer-copyright'],\n\n  init() {\n    this._super(...arguments);\n    assert('Property startYear must be less than or equal to the current year.',\n      this.get('startYear') === null ||\n      this.get('startYear') <= new Date().getFullYear());\n  },\n\n  startYear: null,\n  text: null,\n\n  date: computed(function() {\n    const currentYear = new Date().getFullYear();\n    const startYear = this.get('startYear');\n\n    if (startYear === null || startYear === currentYear) {\n      return `${currentYear}`;\n    } else {\n      return `${startYear} - ${currentYear}`;\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-default-collection-header.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-default-collection-header';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['collection-header']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-default-column-header.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-default-column-header';\n\nconst { Component, computed: { alias } } = Ember;\n\nexport default Component.extend({\n  tagName: 'th',\n  layout,\n  attributeBindings: ['data-field'],\n  'data-field': alias('column.valueBindingPath')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/-md-fixed-btn-base.js":"import Ember from 'ember';\n\nconst { computed, Component } = Ember;\n\nexport default Component.extend({\n  actionArgs: null,\n  large: true,\n\n  actions: {\n    fireButtonAction() {\n      const actionArgs = this.get('actionArgs');\n      if (actionArgs) {\n        this.sendAction('action', actionArgs || null);\n      } else {\n        this.sendAction('action');\n      }\n    }\n  },\n\n  _btnClassString: computed('btnClass', function() {\n    return `${this.get('btnClass')} btn-floating ${this.get('large') ? 'btn-large' : '' }`;\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-fixed-btn.js":"import FixedButtonBase from './-md-fixed-btn-base';\nimport layout from '../templates/components/md-fixed-btn';\n\nexport default FixedButtonBase.extend({\n  layout,\n  tagName: 'li',\n  classNames: ['md-fixed-btn']\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-fixed-btns.js":"import FixedButtonBase from './-md-fixed-btn-base';\nimport layout from '../templates/components/md-fixed-btns';\n\nexport default FixedButtonBase.extend({\n  layout,\n  classNames: ['md-fixed-btns', 'fixed-action-btn']\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-input-date.js":"import Ember from 'ember';\nimport MaterializeInput from './md-input';\nimport layout from '../templates/components/md-input-date';\n\nconst MONTH_NAMES = ['January', 'February', 'March', 'April',\n    'May', 'June', 'July', 'August', 'September', 'October',\n    'November', 'December'];\n\nconst { $ } = Ember;\n\nfunction formatDate(timestamp) {\n  const d = new Date(timestamp);\n  return `${d.getDate()} ${MONTH_NAMES[d.getMonth()]}, ${d.getFullYear()}`;\n}\n\nexport default MaterializeInput.extend({\n  layout,\n\n  selectMonths: true,\n  numberOfYears: 15,\n  min: '',\n  max: '',\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupPicker();\n  },\n\n  willDestroyElement() {\n    this._super(...arguments);\n    this._teardownPicker();\n  },\n\n  _setupPicker() {\n    const datePickerOptions = this.getProperties('selectMonths', 'numberOfYears', 'min', 'max');\n    datePickerOptions.selectYears = datePickerOptions.numberOfYears;\n\n    this._onDateSet = evt => {\n      if (evt.select) {\n        this.set('value', formatDate(evt.select));\n      }\n    };\n\n    this.$('.datepicker').pickadate($.extend(datePickerOptions, {\n      onSet: this._onDateSet\n    }));\n  },\n\n  _teardownPicker() {\n    const $pickadate = this.$('.datepicker').data('pickadate');\n    if ($pickadate) {\n      $pickadate.stop();\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-input-field.js":"import Ember from 'ember';\n\nconst { Component, computed, isPresent } = Ember;\n\nexport default Component.extend({\n  classNames: ['input-field'],\n\n  bindAttributes: ['disabled', 'readonly', 'autofocus'],\n  validate: false,\n\n  isValid: computed('validate', 'errors', function() {\n    return (!this.get('validate') && !isPresent(this.get('errors.firstObject')));\n  }),\n\n  isInvalid: computed('validate', 'errors', function() {\n    return (!this.get('validate') && isPresent(this.get('errors.firstObject')));\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n    // pad the errors element when an icon is present\n    if (isPresent(this.get('icon'))) {\n      this.$('> span').css('padding-left', '3rem');\n    }\n  },\n\n  id: computed('elementId', function() {\n    return `${this.get('elementId')}-input`;\n  }),\n\n  _setupLabel() {\n    const $label = this.$('> label');\n    if (isPresent(this.get('value')) && !$label.hasClass('active')) {\n      $label.addClass('active');\n    }\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-input.js":"import MaterializeInputField from './md-input-field';\nimport layout from '../templates/components/md-input';\n\nexport default MaterializeInputField.extend({\n  layout,\n  type: 'text',\n\n  didInsertElement() {\n    this._super(...arguments);\n    // make sure the label moves when a value is bound.\n    this._setupLabel();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-loader.js":"import Ember from 'ember';\nimport UsesSettings from '../mixins/uses-settings';\nimport layout from '../templates/components/md-loader';\n\nconst {\n  Component,\n  computed,\n  computed: {\n    oneWay\n  },\n  A,\n  String: {\n    htmlSafe\n  }\n} = Ember;\n\nexport default Component.extend(UsesSettings, {\n  layout,\n\n  classNameBindings: ['isBarType:progress:preloader-wrapper', 'active:active', 'size'],\n\n  mode: oneWay('_mdSettings.loaderMode'),\n  percent: 0,\n  size: oneWay('_mdSettings.loaderSize'),\n  active: true,\n  color: null,\n\n  isBarType: computed('mode', function() {\n    return ['determinate', 'indeterminate'].indexOf(this.get('mode')) >= 0;\n  }),\n\n  isDeterminate: computed('mode', function() {\n    return ['determinate'].indexOf(this.get('mode'));\n  }),\n\n  barStyle: computed('mode', 'percent', function() {\n    if (this.get('mode') === 'determinate') {\n      return htmlSafe(`width: ${parseInt(this.get('percent'), 10)}%`);\n    } else {\n      return htmlSafe('');\n    }\n  }),\n\n  barClassName: computed('isBarType', 'mode', function() {\n    return this.get('isBarType') ? this.get('mode') : null;\n  }),\n\n  spinnerClassNames: computed('color', 'isBarType', function() {\n    if (!this.get('isBarType')) {\n      const color = this.get('color');\n      if (!color) {\n        return A(['blue', 'red', 'green', 'yellow']\n          .map(c => (`spinner-layer spinner-${c}`)));\n      } else {\n        return A([`spinner-layer spinner-${color}-only`]);\n      }\n    } else {\n      return A();\n    }\n  })\n});","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-modal-container.js":"import Ember from 'ember';\nimport UsesSettings from '../mixins/uses-settings';\nimport layout from '../templates/components/md-modal-container';\n\nconst { Component, computed: { oneWay } } = Ember;\n\nexport default Component.extend(UsesSettings, {\n  layout,\n  modalContainerId: oneWay('_mdSettings.modalContainerId')\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-modal.js":"import Ember from 'ember';\nimport UsesSettings from '../mixins/uses-settings';\nimport layout from '../templates/components/md-modal';\nimport {\n  EKMixin,\n  keyUp\n} from 'ember-keyboard';\n\nconst {\n  Component,\n  computed,\n  computed: {\n    oneWay\n  },\n  String: {\n    htmlSafe\n  },\n  on\n} = Ember;\n\nexport default Component.extend(EKMixin, UsesSettings, {\n  layout,\n\n  attributeBindings: ['style:inlineStyle'],\n  concatenatedProperties: ['modalClassNames'],\n\n  inlineStyle: computed(function() {\n    return htmlSafe('z-index: 1000;');\n  }),\n\n  isFooterFixed: oneWay('_mdSettings.modalIsFooterFixed'),\n\n  modalClassNames: ['modal', 'show'],\n  _modalClassString: computed('modalClassNames.[]', 'isFooterFixed', function() {\n    const names = this.get('modalClassNames');\n    if (this.get('isFooterFixed')) {\n      names.push('modal-fixed-footer');\n    }\n    return names.join(' ');\n  }),\n\n  init() {\n    this._super(...arguments);\n    this.set('keyboardActivated', true);\n  },\n\n  _onEsc: on(keyUp('Escape'), function() {\n    this.cancel();\n  }),\n\n  cancel() {\n    this.sendAction('close');\n  },\n\n  actions: {\n    closeModal() {\n      this.sendAction('close');\n    }\n  }\n\n});","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-navbar.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-navbar';\n\nconst { $, computed, Component, typeOf, run: { scheduleOnce } } = Ember;\n\nexport default Component.extend({\n  tagName: 'nav',\n  layout,\n  homeRoute: 'index',\n\n  didInsertElement() {\n    this._super(...arguments);\n    // TODO: is this scheduling necessary?\n    scheduleOnce('afterRender', this, this._setupNavbar);\n  },\n\n  _setupNavbar() {\n    if (typeOf($('.button-collapse').sideNav) === 'function') {\n      this.notifyPropertyChange('_sideNavId');\n      this.$('.button-collapse').sideNav({\n        closeOnClick: true\n      });\n    }\n  },\n\n  _sideNavId: computed(function() {\n    return `${this.get('element.id')}-sidenav`;\n  })\n\n  // TODO: Unregister any listeners that $.sideNav() puts in place\n  // _teardownNavbar() {\n  //\n  // }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-pagination.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-pagination';\n\nconst { Component, computed, A } = Ember;\n\nexport default Component.extend({\n  layout,\n\n  classNames: ['pagination'],\n\n  min: 1,\n  max: 1,\n  current: 1,\n  range: 5,\n  tagName: 'ul',\n\n  windowRange: computed('min', 'max', 'range', 'current', function() {\n    // TODO: this should be broken out into a util, so that it can be tested independently\n    const max = this.get('max');\n    const min = this.get('min');\n    const range = this.get('range');\n    const current = this.get('current');\n\n    const middle = Math.floor((max - min) / 2);\n    let low = Math.max(min, current - Math.floor(range / 2));\n    let high = Math.min(max, current + Math.floor(range / 2));\n\n    if (high - low < range - 1) {\n      if (current <= middle) {\n        high = Math.min(max, low + range - 1);\n      } else {\n        low = Math.max(min, high - (range - 1));\n      }\n    }\n    return {\n      low, high\n    };\n  }),\n\n  _pages: computed('windowRange.low', 'windowRange.high', 'current', function() {\n    const a = new A([]);\n    const winRange = this.get('windowRange');\n    const current = this.get('current');\n    for (let i = winRange.low; i <= winRange.high; i += 1) {\n      a.addObject({ val: i, cssClass: (current === i ? 'active' : 'waves-effect') });\n    }\n    return a;\n  }),\n\n  _canGoBack: computed('min', 'current', function() {\n    return this.get('current') > this.get('min');\n  }),\n\n  _canGoFwd: computed('max', 'current', function() {\n    return this.get('current') < this.get('max');\n  }),\n\n  incrementClass: computed('_canGoFwd', function() {\n    return this.get('_canGoFwd') ? '' : 'disabled';\n  }),\n\n  decrementClass: computed('_canGoBack', function() {\n    return this.get('_canGoBack') ? '' : 'disabled';\n  }),\n\n  actions: {\n    oneBack() {\n      if (this.get('_canGoBack')) {\n        this.decrementProperty('current');\n      }\n    },\n    oneFwd() {\n      if (this.get('_canGoFwd')) {\n        this.incrementProperty('current');\n      }\n    },\n    gotoPage(pagenum) {\n      this.set('current', pagenum);\n    }\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-parallax.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-parallax';\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['parallax-container'],\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupParallax();\n  },\n\n  _setupParallax() {\n    this.$('.parallax').parallax();\n  }\n\n  // TODO: unregister any listeners that $.parallax() registers\n  // _teardownParallax() {\n  //\n  // }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-radio.js":"import Ember from 'ember';\nimport SelectableItem from './selectable-item';\nimport layout from '../templates/components/md-radio';\n\nconst { computed, computed: { alias }, isEmpty, assert } = Ember;\n\nexport default SelectableItem.extend({\n  layout,\n\n  value: '',\n  text: alias('name'),\n  groupValue: alias('group.selection'),\n\n  className: ['materialize-radio'],\n\n  checked: computed('groupValue', 'value', function() {\n    return this.get('groupValue') === this.get('value');\n  }),\n\n  didInsertElement() {\n    this._super(...arguments);\n    assert(!isEmpty(this.get('group')), 'materialize-radio is not supported outside the context of a materialize-radio-group');\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-radios.js":"import SelectableItemGroup from './selectable-item-group';\n\nexport default SelectableItemGroup.extend({\n  classNames: ['md-radios'],\n  selectableItemView: 'md-radios-radio'\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-radios-radio.js":"import RadioComponent from './md-radio';\nimport GroupSelectableItemMixin from '../mixins/group-selectable-item';\n\nexport default RadioComponent.extend(GroupSelectableItemMixin, {});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-range.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-range';\n\nconst { Component } = Ember;\n\nexport default Component.extend({\n  layout,\n  classNames: ['md-range'],\n  min: 0,\n  max: 100,\n  step: 1\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-select.js":"import Ember from 'ember';\nimport MaterializeInputField from './md-input-field';\nimport layout from '../templates/components/md-select';\n\nconst { computed, A, observer, isNone, run: { later }, get } = Ember;\n\nexport default MaterializeInputField.extend({\n  layout,\n  classNames: ['md-select'],\n  optionLabelPath: 'content',\n  optionValuePath: 'content',\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupSelect();\n  },\n\n  _setupSelect() {\n    // jscs: disable\n    this.$('select').material_select();\n    // jscs: enable\n  },\n\n  _parsedContent: computed('optionValuePath', 'optionLabelPath', 'content.[]', function() {\n    const contentRegex = /(content\\.|^content$)/;\n    // keep backwards compatability for defining optionValuePath & as optionContentPath `content.{{attName}}`\n    const optionValuePath = (this.get('optionValuePath') || '').replace(contentRegex, '');\n    const optionLabelPath = (this.get('optionLabelPath') || '').replace(contentRegex, '');\n    return A((this.get('content') || []).map((option) => {\n      return {\n        value: optionValuePath ? get(option, optionValuePath) : option,\n        label: optionLabelPath ? get(option, optionLabelPath) : option\n      };\n    }));\n  }),\n\n  // TODO: clean up any listeners that $.select() puts in place\n  // _teardownSelect() {\n  //\n  // }\n\n  // TODO: this could be converted to a computed property, returning a string\n  //  that is bound to the class attribute of the inputSelector\n  errorsDidChange: observer('errors', function() {\n    const inputSelector = this.$('input');\n    // monitor the select's validity and copy the appropriate validation class to the materialize input element.\n    if (!isNone(inputSelector)) {\n      later(this, function() {\n        const isValid = this.$('select').hasClass('valid');\n        if (isValid) {\n          inputSelector.removeClass('invalid');\n          inputSelector.addClass('valid');\n        } else {\n          inputSelector.removeClass('valid');\n          inputSelector.addClass('invalid');\n        }\n      }, 150);\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-switches.js":"import SelectableItemGroup from './selectable-item-group';\n\nexport default SelectableItemGroup.extend({\n  selectableItemView: 'md-switches-switch',\n  multiple: true\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-switches-switch.js":"import GroupSelectableItemMixin from '../mixins/group-selectable-item';\nimport SwitchComponent from './md-switch';\n\nexport default SwitchComponent.extend(GroupSelectableItemMixin, { });\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-switch.js":"import Ember from 'ember';\nimport SelectableItem from './selectable-item';\nimport layout from '../templates/components/md-switch';\n\nconst { computed } = Ember;\n\nexport default SelectableItem.extend({\n  layout,\n\n  classNames: ['switch', 'materialize-switch'],\n\n  offLabel: 'Off',\n  onLabel: 'On',\n  disabled: false,\n\n  _labelClass: computed('name', function() {\n    return this.get('name') ? 'right' : '';\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-tab.js":"import Ember from 'ember';\nimport ChildComponentSupport from 'ember-composability/mixins/child-component-support';\nimport MdTabs from './md-tabs';\nimport layout from '../templates/components/md-tab';\n\nconst { Component, computed, computed: { oneWay } } = Ember;\n\nexport default Component.extend(ChildComponentSupport, {\n  _parentComponentTypes: [MdTabs],\n  tagName: 'li',\n  layout,\n\n  classNames: ['materialize-tabs-tab', 'tab', 'col'],\n  classNameBindings: ['_colClass'],\n\n  colWidth: oneWay('composableParent.colWidth'),\n\n  _colClass: computed('colWidth', function() {\n    return `s${this.get('colWidth')}`;\n  }),\n\n  active: computed('composableParent.composableChildren.[]', 'composableParent.selected', 'value', function() {\n    const selected = this.get('composableParent.selected');\n    if (selected) {\n      return selected === this.get('value');\n    } else {\n      const values = this.get('composableParent')\n        .tabComponents()\n        .map(t => t.get('value'));\n      return values.indexOf(this.get('value')) === 0;\n    }\n  }).readOnly(),\n\n  click() {\n    this.get('composableParent').set('selected', this.get('value'));\n  }\n\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-table-col.js":"import Ember from 'ember';\nimport layout from '../templates/components/md-table-col';\nimport Table from './md-table';\nimport ChildComponentSupport from 'ember-composability/mixins/child-component-support';\n\nconst { Component, computed, get, computed: { oneWay } } = Ember;\n\nexport default Component.extend(ChildComponentSupport, {\n  _parentComponentTypes: [Table],\n  tagName: 'td',\n  layout,\n  valueBindingPath: null,\n  headerComponentName: 'md-default-column-header',\n  header: oneWay('valueBindingPath'),\n  key: oneWay('valueBindingPath'),\n  _value: computed('valueBindingPath', 'row', function() {\n    let vbp = this.get('valueBindingPath');\n    if (!vbp) {\n      return '';\n    } else {\n      return get(this.get('row'), this.get('valueBindingPath'));\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-table.js":"import Ember from 'ember';\nimport ParentComponentSupport from 'ember-composability/mixins/parent-component-support';\nimport layout from '../templates/components/md-table';\n\nconst { A, Component, computed } = Ember;\n\nexport default Component.extend(ParentComponentSupport, {\n  tagName: 'table',\n  layout,\n  columns: null,\n  composableChildrenDebounceTime: 1,\n  init() {\n    this._super(...arguments);\n    this.set('columns', []);\n  },\n\n  columnComponents: computed('composableChildren', function() {\n    return new A(this.get('composableChildren'));\n  }).readOnly(),\n\n  registerChildComponent(childComponent) {\n    this.get('_childComponents').add(childComponent, childComponent.get('key'));\n    this._notifyComposableChildrenChanged();\n  },\n\n  unregisterChildComponent(childComponent) {\n    this.get('_childComponents').delete(childComponent, childComponent.get('key'));\n    this._notifyComposableChildrenChanged();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-tabs.js":"import Ember from 'ember';\nimport ParentComponentSupport from 'ember-composability/mixins/parent-component-support';\nimport layout from '../templates/components/md-tabs';\n\nconst { get,\n  Component,\n  computed,\n  computed: {\n    alias\n  },\n  run: {\n    debounce\n  },\n  A,\n  observer\n} = Ember;\n\nexport default Component.extend(ParentComponentSupport, {\n  layout,\n  classNames: ['materialize-tabs', 'row'],\n  composableChildrenDebounceTime: 1,\n  content: null,\n  numTabs: alias('composableChildren.length'),\n  optionValuePath: 'id',\n  optionLabelPath: 'title',\n  colWidth: 2,\n\n  selected: null,\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._updateIndicatorPosition(false);\n  },\n\n  _indicatorUpdater: observer('selected', 'content.[]', 'composableChildren.[]', function() {\n    debounce(this, this._updateIndicatorPosition, 100);\n  }),\n\n  tabComponents() {\n    return A(this.get('composableChildren')) || A();\n  },\n\n  _updateIndicatorPosition(animate = true) {\n    if (!this.element) {\n      return;\n    }\n    const [tabComponent] = (this.get('composableChildren') || []).filter(item => get(item, 'value') === this.get('selected'));\n    const tabSetRect = this.element.getBoundingClientRect();\n    if (tabComponent) {\n      const tabRect = tabComponent.element.getBoundingClientRect();\n\n      const cssParams = {\n        left: tabRect.left - tabSetRect.left,\n        right: tabSetRect.right - tabRect.right\n      };\n\n      if (!animate) {\n        this.$('.indicator').css(cssParams);\n      } else {\n        this.$('.indicator1').velocity(cssParams, {\n          duration: 150\n        });\n        this.$('.indicator2').velocity(cssParams, {\n          duration: 150,\n          delay: 40\n        });\n      }\n    }\n  },\n\n  _content: computed('content.[]', 'optionLabelPath', 'optionValuePath', function() {\n    const labelPath = this.get('optionLabelPath');\n    const valuePath = this.get('optionValuePath');\n    return new A((this.get('content') || []).map(contentItem => ({\n      id: contentItem[valuePath],\n      title: contentItem[labelPath]\n    })));\n  })\n});","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/md-textarea.js":"import InputField from './md-input-field';\nimport layout from '../templates/components/md-textarea';\n\nexport default InputField.extend({\n  layout,\n\n  didInsertElement() {\n    this._super(...arguments);\n    // make sure the label moves when a value is bound.\n    this._setupLabel();\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/selectable-item-group.js":"import Ember from 'ember';\nimport ParentComponentSupport from 'ember-composability/mixins/parent-component-support';\nimport layout from '../templates/components/selectable-item-group';\n\nconst { get, Component, A, computed } = Ember;\n\nexport default Component.extend(ParentComponentSupport, {\n  layout,\n\n  content: null,\n  selection: null,\n\n  optionValuePath: 'content',\n  optionLabelPath: 'content',\n  multiple: false,\n  __materializeSelectableItemGroup: true,\n\n  init() {\n    this._super(...arguments);\n    if (this.get('selection') === null && !!this.get('multiple')) {\n      this.set('selection', new A([]));\n    }\n  },\n\n  isValueSelected(value) {\n    if (this.get('multiple')) {\n      return this.get('selection').indexOf(value) >= 0;\n    } else {\n      return this.get('selection') === value;\n    }\n  },\n\n  setValueSelection(value, select) {\n    if (select) {\n      return this.addToSelection(value);\n    } else {\n      return this.removeFromSelection(value);\n    }\n  },\n\n  addToSelection(value) {\n    if (this.get('multiple')) {\n      this.get('selection').addObject(value);\n    } else {\n      this.set('selection', value);\n    }\n  },\n\n  removeFromSelection(value) {\n    if (this.get('multiple')) {\n      this.get('selection').removeObject(value);\n    } else {\n      if (this.get('selection') === value) {\n        this.set('selection', null);\n      }\n    }\n  },\n  disabled: false,\n\n  _valuePath: computed('optionValuePath', function() {\n    const optionValuePath = get(this, 'optionValuePath');\n    return optionValuePath.replace(/^content\\.?/, '');\n  }),\n\n  _labelPath: computed('optionLabelPath', function() {\n    const optionLabelPath = get(this, 'optionLabelPath');\n    return optionLabelPath.replace(/^content\\.?/, '');\n  }),\n\n  _content: computed('content.[]', '_valuePath', '_labelPath', function() {\n    const valuePath = get(this, '_valuePath');\n    const labelPath = get(this, '_labelPath');\n    const content = get(this, 'content') || new A([]);\n\n    if (valuePath && labelPath) {\n      return A(\n        content.map(el => {\n          return { value: get(el, valuePath), label: get(el, labelPath) };\n        })\n      );\n    } else {\n      return A(\n        content.map(el => {\n          return { value: el, label: el };\n        })\n      );\n    }\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/components/selectable-item.js":"import Ember from 'ember';\nimport ChildComponentSupport from 'ember-composability/mixins/child-component-support';\nimport SelectableItemGroup from './selectable-item-group';\nimport _computed from 'ember-new-computed';\n\nconst { computed, computed: { alias }, Component } = Ember;\n\nexport default Component.extend(ChildComponentSupport, {\n  _parentComponentTypes: [SelectableItemGroup],\n  checked: null,\n  disabled: false,\n  classNames: ['materialize-selectable-item'],\n\n  _checked: _computed('checked', 'group.selection', 'group.selection.[]', {\n    get() {\n      let group = this.get('group');\n      if (!group) {\n        return this.get('checked');\n      } else {\n        return group.isValueSelected(this.get('value'));\n      }\n    },\n    set(key, val) {\n      let group = this.get('group');\n      if (!group) {\n        this.set('checked', val);\n      } else {\n        group.setValueSelection(this.get('value'), val);\n      }\n      this.sendAction('action', { checked: !!val });\n      return !!val;\n    }\n  }),\n\n  isSelected: alias('_checked'),\n\n  _setupLabel() {\n    let [$input] = this.$('.materialize-selectable-item-input, .materialize-selectable-item-input-container input').toArray();\n\n    let inputId = $input ? $input.id : null;\n    this.$('.materialize-selectable-item-label').attr('for', inputId);\n  },\n\n  didInsertElement() {\n    this._super(...arguments);\n    this._setupLabel();\n  },\n\n  group: computed(function() {\n    return this.nearestWithProperty('__materializeSelectableItemGroup');\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/mixins/group-selectable-item.js":"import Ember from 'ember';\n\nconst { Mixin, computed: { alias } } = Ember;\n\nexport default Mixin.create({\n  name: alias('content.label'),\n  value: alias('content.value'),\n  disabled: false\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/mixins/uses-settings.js":"import Ember from 'ember';\n\nconst { computed, Mixin } = Ember;\n\nexport default Mixin.create({\n  _mdSettings: computed(function() {\n    // jscs:disable disallowDirectPropertyAccess\n    let owner = Ember.getOwner ? Ember.getOwner(this) : this.get('container');\n    // jscs:enable disallowDirectPropertyAccess\n    return owner.lookup('service:materialize-settings');\n  })\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/addon/services/md-settings.js":"import Ember from 'ember';\n\nconst { getWithDefault, set, computed: { oneWay }, Service, String: { classify } } = Ember;\n// jscs:disable disallowDirectPropertyAccess\nconst keys = Object.keys || Ember.keys;\n// jscs:enable disallowDirectPropertyAccess\n\nexport default Service.extend({\n  // Footer\n  modalIsFooterFixed: oneWay('defaultModalIsFooterFixed'),\n  // Button\n  buttonIconPosition: oneWay('defaultButtonIconPosition'),\n  // Loader\n  loaderSize: oneWay('defaultLoaderSize'),\n  loaderMode: oneWay('defaultLoaderMode'),\n  // Modal\n  modalContainerId: oneWay('defaultModalContainerId'),\n\n  // Animation (Dropdown Button)\n  dropdownInDuration: oneWay('defaultDropdownInDuration'),\n  dropdownOutDuration: oneWay('defaultDropdownOutDuration'),\n\n  init() {\n    this._super(...arguments);\n    this._setDefaults();\n  },\n\n  _setDefaults() {\n    const defaults = getWithDefault(this, 'materializeDefaults', {});\n    keys(defaults).map(key => {\n      const classifiedKey = classify(key);\n      const defaultKey = `default${classifiedKey}`;\n      return set(this, defaultKey, defaults[key]);\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-badge.js":"import Ember from 'ember';\nimport MaterializeBadge from './md-badge';\n\nexport default MaterializeBadge.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-badge}} has been deprecated. Please use {{md-badge}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-button.js":"import Ember from 'ember';\nimport MaterializeButton from './md-btn';\n\nexport default MaterializeButton.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-button}} has been deprecated. Please use {{md-btn}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-button-submit.js":"import Ember from 'ember';\nimport MaterializeButtonSubmit from './md-btn-submit';\n\nexport default MaterializeButtonSubmit.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-button-submit}} has been deprecated. Please use {{md-btn-submit}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-card-action.js":"import Ember from 'ember';\nimport MaterializeCardAction from './md-card-action';\n\nexport default MaterializeCardAction.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-card-action}} has been deprecated. Please use {{md-card-action}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-card-content.js":"import Ember from 'ember';\nimport MaterializeCardContent from './md-card-content';\n\nexport default MaterializeCardContent.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-card-content}} has been deprecated. Please use {{md-card-content}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-card.js":"import Ember from 'ember';\nimport MaterializeCard from './md-card';\n\nexport default MaterializeCard.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-card}} has been deprecated. Please use {{md-card}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-card-panel.js":"import Ember from 'ember';\nimport MaterializeCardPanel from './md-card-panel';\n\nexport default MaterializeCardPanel.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-card-panel}} has been deprecated. Please use {{md-card-panel}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-card-reveal.js":"import Ember from 'ember';\nimport MaterializeCardReveal from './md-card-reveal';\n\nexport default MaterializeCardReveal.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-card-reveal}} has been deprecated. Please use {{md-card-reveal}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-checkboxes.js":"import Ember from 'ember';\nimport materializeCheckboxes from './md-checks';\n\nexport default materializeCheckboxes.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-checkboxes}} has been deprecated. Please use {{md-checks}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-checkbox.js":"import Ember from 'ember';\nimport materializeCheckbox from './md-check';\n\nexport default materializeCheckbox.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-checkbox}} has been deprecated. Please use {{md-check}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-collapsible-card.js":"import Ember from 'ember';\nimport MaterializeCollapsibleCard from './md-card-collapsible';\n\nexport default MaterializeCollapsibleCard.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-collapsible-card}} has been deprecated. Please use {{md-card-collapsible}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-collapsible.js":"import Ember from 'ember';\nimport MaterializeCollapsible from './md-collapsible';\n\nexport default MaterializeCollapsible.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-collapsible}} has been deprecated. Please use {{md-collapsible}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-copyright.js":"import Ember from 'ember';\nimport materializeCopyright from './md-copyright';\n\nexport default materializeCopyright.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-copyright}} has been deprecated. Please use {{md-copyright}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-date-input.js":"import Ember from 'ember';\nimport materializeDateInput from './md-input-date';\n\nexport default materializeDateInput.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-date-input}} has been deprecated. Please use {{md-input-date}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-input-field.js":"import Ember from 'ember';\nimport materializeInputField from './md-input-field';\n\nexport default materializeInputField.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-input-field}} has been deprecated. Please use {{md-input-field}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-input.js":"import Ember from 'ember';\nimport materializeInput from './md-input';\n\nexport default materializeInput.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-input}} has been deprecated. Please use {{md-input}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-loader.js":"import Ember from 'ember';\nimport materializeLoader from './md-loader';\n\nexport default materializeLoader.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-loader}} has been deprecated. Please use {{md-loader}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-modal.js":"import Ember from 'ember';\nimport MaterializeModal from './md-modal';\n\nexport default MaterializeModal.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-modal}} has been deprecated. Please use {{md-modal}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-navbar.js":"import Ember from 'ember';\nimport MaterializeNavBar from './md-navbar';\n\nexport default MaterializeNavBar.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-navbar}} has been deprecated. Please use {{md-navbar}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-pagination.js":"import Ember from 'ember';\nimport materializePagination from './md-pagination';\n\nexport default materializePagination.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-pagination}} has been deprecated. Please use {{md-pagination}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-parallax.js":"import Ember from 'ember';\nimport materializeParallax from './md-parallax';\n\nexport default materializeParallax.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-parallax}} has been deprecated. Please use {{md-parallax}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-radio.js":"import Ember from 'ember';\nimport materializeRadio from './md-radio';\n\nexport default materializeRadio.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-radio}} has been deprecated. Please use {{md-radio}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-radios.js":"import Ember from 'ember';\nimport materializeRadios from './md-radios';\n\nexport default materializeRadios.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-radios}} has been deprecated. Please use {{md-radios}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-range.js":"import Ember from 'ember';\nimport materializeRange from './md-range';\n\nexport default materializeRange.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-range}} has been deprecated. Please use {{md-range}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-select.js":"import Ember from 'ember';\nimport materializeSelect from './md-select';\n\nexport default materializeSelect.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-select}} has been deprecated. Please use {{md-select}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-switches.js":"import Ember from 'ember';\nimport materializeSwitches from './md-switches';\n\nexport default materializeSwitches.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-switches}} has been deprecated. Please use {{md-switches}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-switch.js":"import Ember from 'ember';\nimport materializeSwitch from './md-switch';\n\nexport default materializeSwitch.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-switch}} has been deprecated. Please use {{md-switch}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-tabs.js":"import Ember from 'ember';\nimport materializeTabs from './md-tabs';\n\nexport default materializeTabs.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-tabs}} has been deprecated. Please use {{md-tabs}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-tabs-tab.js":"import Ember from 'ember';\nimport materializeTabsTab from './md-tab';\n\nexport default materializeTabsTab.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-tabs-tab}} has been deprecated. Please use {{md-tab}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/materialize-textarea.js":"import Ember from 'ember';\nimport materializeTextarea from './md-textarea';\n\nexport default materializeTextarea.extend({\n  init() {\n    this._super(...arguments);\n    Ember.deprecate(\"{{materialize-textarea}} has been deprecated. Please use {{md-textarea}} instead\", false, {url: \"https://github.com/sgasser/ember-cli-materialize/issues/67\"});\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-badge.js":"import materializeBadge from 'ember-cli-materialize/components/md-badge';\n\nexport default materializeBadge;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-btn-dropdown.js":"import MaterializeButtonDropdown from 'ember-cli-materialize/components/md-btn-dropdown';\n\nexport default MaterializeButtonDropdown;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-btn.js":"import MaterializeButton from 'ember-cli-materialize/components/md-btn';\n\nexport default MaterializeButton;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-btn-submit.js":"import MaterializeButtonSubmit from 'ember-cli-materialize/components/md-btn-submit';\n\nexport default MaterializeButtonSubmit;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card-action.js":"import MaterializeCardAction from 'ember-cli-materialize/components/md-card-action';\n\nexport default MaterializeCardAction;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card-collapsible.js":"import MaterializeCollapsibleCard from 'ember-cli-materialize/components/md-card-collapsible';\n\nexport default MaterializeCollapsibleCard;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card-content.js":"import MaterializeCardContent from 'ember-cli-materialize/components/md-card-content';\n\nexport default MaterializeCardContent;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card.js":"import MaterializeCard from 'ember-cli-materialize/components/md-card';\n\nexport default MaterializeCard;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card-panel.js":"import MaterializeCardPanel from 'ember-cli-materialize/components/md-card-panel';\n\nexport default MaterializeCardPanel;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-card-reveal.js":"import MaterializeCardReveal from 'ember-cli-materialize/components/md-card-reveal';\n\nexport default MaterializeCardReveal;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-check.js":"import materializeCheckbox from 'ember-cli-materialize/components/md-check';\n\nexport default materializeCheckbox;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-checks-check.js":"export { default } from 'ember-cli-materialize/components/md-checks-check';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-checks.js":"import materializeCheckboxes from 'ember-cli-materialize/components/md-checks';\n\nexport default materializeCheckboxes;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-collapsible.js":"import MaterializeCollapsible from 'ember-cli-materialize/components/md-collapsible';\n\nexport default MaterializeCollapsible;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-collection.js":"export { default } from 'ember-cli-materialize/components/md-collection';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-copyright.js":"import materializeCopyright from 'ember-cli-materialize/components/md-copyright';\n\nexport default materializeCopyright;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-default-collection-header.js":"export { default } from 'ember-cli-materialize/components/md-default-collection-header';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-default-column-header.js":"export { default } from 'ember-cli-materialize/components/md-default-column-header';\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-fixed-btn.js":"export { default } from 'ember-cli-materialize/components/md-fixed-btn';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-fixed-btns.js":"export { default } from 'ember-cli-materialize/components/md-fixed-btns';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-input-date.js":"import materializeDateInput from 'ember-cli-materialize/components/md-input-date';\n\nexport default materializeDateInput;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-input-field.js":"import materializeInputField from 'ember-cli-materialize/components/md-input-field';\n\nexport default materializeInputField;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-input.js":"import materializeInput from 'ember-cli-materialize/components/md-input';\n\nexport default materializeInput;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-loader.js":"import materializeLoader from 'ember-cli-materialize/components/md-loader';\n\nexport default materializeLoader;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-modal-container.js":"import mdModalContainer from 'ember-cli-materialize/components/md-modal-container';\n\nexport default mdModalContainer;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-modal.js":"import materializeModal from 'ember-cli-materialize/components/md-modal';\n\nexport default materializeModal;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-navbar.js":"import MaterializeNavBar from 'ember-cli-materialize/components/md-navbar';\n\nexport default MaterializeNavBar;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-pagination.js":"import materializePagination from 'ember-cli-materialize/components/md-pagination';\n\nexport default materializePagination;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-parallax.js":"import materializeParallax from 'ember-cli-materialize/components/md-parallax';\n\nexport default materializeParallax;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-radio.js":"import materializeRadio from 'ember-cli-materialize/components/md-radio';\n\nexport default materializeRadio;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-radios.js":"import materializeRadios from 'ember-cli-materialize/components/md-radios';\n\nexport default materializeRadios;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-radios-radio.js":"export { default } from 'ember-cli-materialize/components/md-radios-radio';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-range.js":"import materializeRange from 'ember-cli-materialize/components/md-range';\n\nexport default materializeRange;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-select.js":"import materializeSelect from 'ember-cli-materialize/components/md-select';\n\nexport default materializeSelect;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-switches.js":"import materializeSwitches from 'ember-cli-materialize/components/md-switches';\n\nexport default materializeSwitches;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-switches-switch.js":"export { default } from 'ember-cli-materialize/components/md-switches-switch';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-switch.js":"import materializeSwitch from 'ember-cli-materialize/components/md-switch';\n\nexport default materializeSwitch;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-tab.js":"import materializeTabsTab from 'ember-cli-materialize/components/md-tab';\n\nexport default materializeTabsTab;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-table-col.js":"export { default } from 'ember-cli-materialize/components/md-table-col';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-table.js":"export { default } from 'ember-cli-materialize/components/md-table';","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-tabs.js":"import materializeTabs from 'ember-cli-materialize/components/md-tabs';\n\nexport default materializeTabs;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/components/md-textarea.js":"import materializeTextarea from 'ember-cli-materialize/components/md-textarea';\n\nexport default materializeTextarea;\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/initializers/add-modals-container.js":"\nexport function initialize () {\n  const application = arguments[1] || arguments[0];\n  var rootEl = document.querySelector(application.rootElement);\n  var modalContainerEl = document.createElement('div');\n  var emberModalDialog = application.emberModalDialog || {};\n  var modalContainerElId = emberModalDialog.modalRootElementId || 'modal-overlays';\n  modalContainerEl.id = modalContainerElId;\n  rootEl.appendChild(modalContainerEl);\n\n  application.register('config:modals-container-id',\n                       modalContainerElId,\n                       { instantiate: false });\n  application.inject('component:materialize-modal',\n                     'destinationElementId',\n                     'config:modals-container-id');\n}\n\nexport default {\n  name: 'add-modals-container',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/initializers/md-settings.js":"import config from '../config/environment';\nimport MaterializeSettings from 'ember-cli-materialize/services/md-settings';\n\nexport function initialize() {\n  const { materializeDefaults } = config;\n  const application = arguments[1] || arguments[0];\n\n  application.register('config:materialize', materializeDefaults, { instantiate: false });\n  application.register('service:materialize-settings', MaterializeSettings);\n  application.inject('service:materialize-settings', 'materializeDefaults', 'config:materialize');\n}\n\nexport default {\n  name: 'md-settings',\n  initialize: initialize\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-materialize/node_modules/ember-cli-materialize/app/services/md-settings.js":"export { default } from 'ember-cli-materialize/services/md-settings';"}